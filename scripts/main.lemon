#define EXTRA_SAVE_SLOTS_ACTIVE = 1

include dataselect
include renderhooks
include saveslots
include extrafunctions

// menu stuff
global u8 ESS_save_entered
global s8 ESS_save_page
global u8 ESS_robotnik_timer
global s16 ESS_bg_scroll
global u64 ESS_zonename
global u8 ESS_menu_style

constant u8 ESS_page_count = 5

function u64 ESS_getSaveStr(string lol)
{
	u64 returnstr = stringformat("%s_page%d", lol, ESS_save_page)
	if (ESS_save_page == 0)
		returnstr = lol
	return returnstr
}

//# address-hook(0x003af0) end(0x003b12)
function void Menu.FadeInAfterInit()
{
	if (global.game_mode != 0x4c)
	{
		base.Menu.FadeInAfterInit()
		return
	}
	
	u8 lastGameMode = global.game_mode

	SetPaletteFadedOut(0x003f)
	D4.u16 = 0x15
	while (D4.s16 >= 0)
	{
		global.frame_state = 0x12
		waitForNextFrame()

		FadeInPalette()
		LoadRequiredSpritePatterns()
		--D4.s16

	#if STANDALONE
		// SEGA logo
		if (global.game_mode == 0x04)
		{
			Renderer.resetSprites()
			Renderer.drawCustomSprite("original_game_by", getScreenWidth() / 2 - 85, 60, 0x00, 0, 0x2000, 0, u16(u8[0xfffffc01] & 0x0e) * 96 / 0x0e)
		}

		// Data Select
		if (global.game_mode == 0x4c || lastGameMode == 0x4c)
		{
			// Quick scroll-in effect
			if (ESS_bg_scroll < 0)
			{
				ESS_bg_scroll += 40
				if (ESS_bg_scroll >= 0)
					ESS_bg_scroll = 0
			}
		
			// Draw our own widescreen version of the background
			//  -> For this to work, we need to update the sprites as well
			u16 backupD4 = D4.u16
			UpdateGameObjects()
			RenderSprites()

			// Update scroll offset (if the player scrolls during fade-in already)
			u16[0xffffe002] = -camera.foreground.x.u16

			DataSelect.drawCustomPlanes()
			ESS_drawSaveBoxes()
			D4.u16 = backupD4
		}
	#endif
	}
}