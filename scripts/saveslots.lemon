/*
	This script file is part of the Sonic 3 A.I.R. script software distribution.
	Copyright (C) 2017-2022 by Eukaryot

	Published under the GNU GPLv3 open source software license, see license.txt
	or https://www.gnu.org/licenses/gpl-3.0.en.html
*/



// SRAM layout overview
// (Note: The first part of 0x50 bytes is the same as in original S3&K, the rest is specific for S3AIR)
//  - Bytes 0x00.. 0x4f = 8 save slots as seen in Data Select, with 10 bytes each
//  - Bytes 0x50.. 0x53 = Current Blue Sphere game progress



// Read from SRAM

//# address-hook(0x00c154) end(0x00c260)
function void InitSaveSlots()
{
	// Without Sonic 3 locked-on, don't do anything here
	if (global.lock_on_state != 0)
		return

	u16[0xffffef56] = 0

#if STANDALONE

	// Read competition mode persistent data
	{
		// Before trying to load persistent data, write some default data first
		for (u8 i = 0; i < 0x50; i += 0x10)
		{
			u32[0xffffe600 + i + 0]  = 0x80000000
			u32[0xffffe600 + i + 4]  = 0x80000000
			u32[0xffffe600 + i + 8]  = 0x80000000
			u32[0xffffe600 + i + 12] = 0x00010200
		}

		// Now overwrite it if there is persistent data to load; otherwise this has no effect
		System.loadPersistentData(0xffffe600, "SRAM_CompetitionRecords", 0x50)
	}

	// Read data select saves persistent data
	{
		// Before trying to load persistent data, write some default data first
		zeroMemory(0xffffe6ac, 0x50)
		for (u8 i = 0; i < 8; ++i)
		{
			u8[0xffffe6ac + i * 0x0a] = 0x80
		}
		
		// Now overwrite it if there is persistent data to load; otherwise this has no effect
		//  -> This is even done twice, once using the old SRAM system (for legacy support), once using the more flexible persistent data system
		//SRAM.load(0xffffe6ac, 0, 0x50)
		System.loadPersistentData(0xffffe6ac, ESS_getSaveStr("SRAM_Saveslots"), 0x50)
		//System.writeDisplayLine(stringformat("data loaded for save set %d", ESS_save_page))

	/*
		// TEST: Create 3 save slots with all Chaos Emeralds, and 3 with all Super Emeralds

		A0 = 0xffffe6ac
		u8[A0 + 0x00] = 2
		u8[A0 + 0x01] = 0
		u8[A0 + 0x02] = 0x10
		u8[A0 + 0x03] = 0x0e
		u16[A0 + 0x04] = 0
		u16[A0 + 0x06] = 0x5555
		u8[A0 + 0x08] = 5
		u8[A0 + 0x09] = 1

		A0 += 0x0a
		u8[A0 + 0x00] = 2
		u8[A0 + 0x01] = 0
		u8[A0 + 0x02] = 0x20
		u8[A0 + 0x03] = 0x0e
		u16[A0 + 0x04] = 0
		u16[A0 + 0x06] = 0x5555
		u8[A0 + 0x08] = 5
		u8[A0 + 0x09] = 1

		A0 += 0x0a
		u8[A0 + 0x00] = 2
		u8[A0 + 0x01] = 0
		u8[A0 + 0x02] = 0x30
		u8[A0 + 0x03] = 0x0e
		u16[A0 + 0x04] = 0
		u16[A0 + 0x06] = 0x5555
		u8[A0 + 0x08] = 5
		u8[A0 + 0x09] = 1

		A0 += 0x0a
		u8[A0 + 0x00] = 3
		u8[A0 + 0x01] = 0
		u8[A0 + 0x02] = 0x10
		u8[A0 + 0x03] = 0x0e
		u16[A0 + 0x04] = 0
		u16[A0 + 0x06] = 0xffff
		u8[A0 + 0x08] = 5
		u8[A0 + 0x09] = 1

		A0 += 0x0a
		u8[A0 + 0x00] = 3
		u8[A0 + 0x01] = 0
		u8[A0 + 0x02] = 0x20
		u8[A0 + 0x03] = 0x0e
		u16[A0 + 0x04] = 0
		u16[A0 + 0x06] = 0xffff
		u8[A0 + 0x08] = 5
		u8[A0 + 0x09] = 1

		A0 += 0x0a
		u8[A0 + 0x00] = 3
		u8[A0 + 0x01] = 0
		u8[A0 + 0x02] = 0x30
		u8[A0 + 0x03] = 0x0e
		u16[A0 + 0x04] = 0
		u16[A0 + 0x06] = 0xffff
		u8[A0 + 0x08] = 5
		u8[A0 + 0x09] = 1
	*/

		// Load additional save slot data
		//zeroMemory(0x801100, 0x100)
		System.loadPersistentData(0x801100, ESS_getSaveStr("SRAM_SaveslotsExt"), 0x100)
	}

#else

	A0 = 0x200011
	A1 = 0x2000bd
	A2 = 0xffffe600
	D0 = 0x29
	D1.u16 = 0x4c44
	fn00c30e()
	if (!_equal())
	{
		copyMemory(0xffffe600, 0x00c262, 0x52)
		fn00c3c6()
	}

	bool skipUntil00c256 = false
	A0 = 0x200281
	A1 = 0x20032d
	A2 = 0xffffe6ac
	D0 = 0x29
	D1.u16 = 0x4244
	fn00c30e()

	if (_equal())
	{
		A0 = 0xffffe6ac
		for (u8 i = 0; i < 8; ++i)
		{
			if (s8[A0] >= 0)
			{
				skipUntil00c256 = true
				break
			}
			A0 += 0x0a
		}
	}

	if (!skipUntil00c256)
	{
		copyMemory(0xffffe600, 0x00c2b4, 0x52)

		A0 = 0x200169
		A1 = 0x2001f5
		A2 = 0xffff0000
		D0 = 0x19
		D1.u16 = 0x4244
		fn00c30e()
		if (_equal())
		{
			A0 = 0xffffe6ac
			A1 = 0xff0000
			A2 = 0x00c306
			D0 = 0x05
			while (D0.s16 >= 0)
			{
				if (s8[A1] >= 0)
				{
					u8[A0] = 0
					u8[A0 + 0x04] = u8[A1 + 0x01]
					u8[A0 + 0x05] = u8[A1 + 0x07]
					u8[A0 + 0x02] = u8[A1 + 0x02] << 4
					D1 = u8[A1 + 0x03]
					u8[A0 + 0x03] = u8[A2 + D1.s16]
					D1.u8 = u8[A1 + 0x04]
					u8[A0 + 0x02] |= D1.u8
					D1.u8 = u8[A1 + 0x06]

					D2 = 0
					D3 = 0x06
					while (D3.s16 >= 0)
					{
						if (D1.u8 & 0x01)
						{
							D2.u16 |= 0x01
						}
						D1.u8 <<= 1
						D2.u16 <<= 2
						--D3.s16
					}
					u16[A0 + 0x06] = D2.u16
				}

				A0 += 0x0a
				A1 += 8
				--D0.s16
			}
		}

		SaveGameSlot()
	}
#endif

	dataselect.nosave_characters = CHARS_SONIC_AND_TAILS
	dataselect.slot_selected = 1
}

//# address-hook(0x00c3e4) end(0x00c402)
function void SaveGameSlot()
{
	//System.writeDisplayLine(stringformat("data saved for save set %d", ESS_save_page))
	
	// This function saves the data select saves data to SRAM

#if STANDALONE
	// Before saving, do a quick check if data is actually valid
	//  -> Otherwise something went horribly wrong before and we would wipe the save data by saving now
	bool invalidOrDefault = true
	for (u32 i = 0; i < 0x50; i += 0x0a)
	{
		if (u32[0xffffe6ac + i] != 0 || u32[0xffffe6ac + i + 4] != 0 || (u16[0xffffe6ac + i + 8] != 0 && u16[0xffffe6ac + i + 8] != 0x300))
		{
			invalidOrDefault = false
			break
		}
	}

	if (!invalidOrDefault)
	{
		SRAM.save(0xffffe6ac, 0, 0x50)
		System.savePersistentData(0xffffe6ac, ESS_getSaveStr("SRAM_Saveslots"), 0x50)
		System.savePersistentData(0x801100, ESS_getSaveStr("SRAM_SaveslotsExt"), 0x100)
	}

#else
	u32 backupA0 = A0
	u16 backupD7 = D7.u16

	A0 = 0x200281
	A1 = 0x20032d
	A2 = 0xffffe6ac
	D0 = 0x29
	fn00c376()

	A0 = backupA0
	D7.u16 = backupD7
#endif
}